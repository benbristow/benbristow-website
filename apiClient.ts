//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import axios, { AxiosError } from 'axios';
import type { AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

export class BenBristowWebsiteApiClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    /**
     * @param body (optional) 
     * @return No Content
     */
    contactForm(body: SubmitContactFormBindingModel | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/ContactForm";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processContactForm(_response);
        });
    }

    protected processContactForm(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 204) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    photos(  cancelToken?: CancelToken | undefined): Promise<PhotoViewModel[]> {
        let url_ = this.baseUrl + "/Photos";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processPhotos(_response);
        });
    }

    protected processPhotos(response: AxiosResponse): Promise<PhotoViewModel[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(PhotoViewModel.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<PhotoViewModel[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PhotoViewModel[]>(null as any);
    }

    /**
     * @return Success
     */
    topTracks(  cancelToken?: CancelToken | undefined): Promise<TrackViewModel[]> {
        let url_ = this.baseUrl + "/TopTracks";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTopTracks(_response);
        });
    }

    protected processTopTracks(response: AxiosResponse): Promise<TrackViewModel[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(TrackViewModel.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<TrackViewModel[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TrackViewModel[]>(null as any);
    }

    /**
     * @return Success
     */
    videos(  cancelToken?: CancelToken | undefined): Promise<VideoViewModel[]> {
        let url_ = this.baseUrl + "/Videos";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processVideos(_response);
        });
    }

    protected processVideos(response: AxiosResponse): Promise<VideoViewModel[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(VideoViewModel.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<VideoViewModel[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<VideoViewModel[]>(null as any);
    }
}

export class PhotoViewModel implements IPhotoViewModel {
    readonly id?: string | null;
    readonly altText?: string | null;
    readonly imageUrl?: string | null;
    readonly url?: string | null;

    constructor(data?: IPhotoViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).id = _data["id"] !== undefined ? _data["id"] : <any>null;
            (<any>this).altText = _data["altText"] !== undefined ? _data["altText"] : <any>null;
            (<any>this).imageUrl = _data["imageUrl"] !== undefined ? _data["imageUrl"] : <any>null;
            (<any>this).url = _data["url"] !== undefined ? _data["url"] : <any>null;
        }
    }

    static fromJS(data: any): PhotoViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new PhotoViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["altText"] = this.altText !== undefined ? this.altText : <any>null;
        data["imageUrl"] = this.imageUrl !== undefined ? this.imageUrl : <any>null;
        data["url"] = this.url !== undefined ? this.url : <any>null;
        return data;
    }
}

export interface IPhotoViewModel {
    id?: string | null;
    altText?: string | null;
    imageUrl?: string | null;
    url?: string | null;
}

export class SubmitContactFormBindingModel implements ISubmitContactFormBindingModel {
    email?: string | null;
    name?: string | null;
    message?: string | null;
    recaptchaCode?: string | null;

    constructor(data?: ISubmitContactFormBindingModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"] !== undefined ? _data["email"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
            this.recaptchaCode = _data["recaptchaCode"] !== undefined ? _data["recaptchaCode"] : <any>null;
        }
    }

    static fromJS(data: any): SubmitContactFormBindingModel {
        data = typeof data === 'object' ? data : {};
        let result = new SubmitContactFormBindingModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email !== undefined ? this.email : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["recaptchaCode"] = this.recaptchaCode !== undefined ? this.recaptchaCode : <any>null;
        return data;
    }
}

export interface ISubmitContactFormBindingModel {
    email?: string | null;
    name?: string | null;
    message?: string | null;
    recaptchaCode?: string | null;
}

export class TrackViewModel implements ITrackViewModel {
    readonly artist?: string | null;
    readonly image?: string | null;
    readonly title?: string | null;
    readonly url?: string | null;

    constructor(data?: ITrackViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).artist = _data["artist"] !== undefined ? _data["artist"] : <any>null;
            (<any>this).image = _data["image"] !== undefined ? _data["image"] : <any>null;
            (<any>this).title = _data["title"] !== undefined ? _data["title"] : <any>null;
            (<any>this).url = _data["url"] !== undefined ? _data["url"] : <any>null;
        }
    }

    static fromJS(data: any): TrackViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new TrackViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["artist"] = this.artist !== undefined ? this.artist : <any>null;
        data["image"] = this.image !== undefined ? this.image : <any>null;
        data["title"] = this.title !== undefined ? this.title : <any>null;
        data["url"] = this.url !== undefined ? this.url : <any>null;
        return data;
    }
}

export interface ITrackViewModel {
    artist?: string | null;
    image?: string | null;
    title?: string | null;
    url?: string | null;
}

export class ValidationProblemDetails implements IValidationProblemDetails {
    type?: string | null;
    title?: string | null;
    status?: number | null;
    detail?: string | null;
    instance?: string | null;
    readonly errors?: { [key: string]: string[]; } | null;

    [key: string]: any;

    constructor(data?: IValidationProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.type = _data["type"] !== undefined ? _data["type"] : <any>null;
            this.title = _data["title"] !== undefined ? _data["title"] : <any>null;
            this.status = _data["status"] !== undefined ? _data["status"] : <any>null;
            this.detail = _data["detail"] !== undefined ? _data["detail"] : <any>null;
            this.instance = _data["instance"] !== undefined ? _data["instance"] : <any>null;
            if (_data["errors"]) {
                (<any>this).errors = {} as any;
                for (let key in _data["errors"]) {
                    if (_data["errors"].hasOwnProperty(key))
                        (<any>(<any>this).errors)![key] = _data["errors"][key] !== undefined ? _data["errors"][key] : [];
                }
            }
            else {
                (<any>this).errors = <any>null;
            }
        }
    }

    static fromJS(data: any): ValidationProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ValidationProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["type"] = this.type !== undefined ? this.type : <any>null;
        data["title"] = this.title !== undefined ? this.title : <any>null;
        data["status"] = this.status !== undefined ? this.status : <any>null;
        data["detail"] = this.detail !== undefined ? this.detail : <any>null;
        data["instance"] = this.instance !== undefined ? this.instance : <any>null;
        if (this.errors) {
            data["errors"] = {};
            for (let key in this.errors) {
                if (this.errors.hasOwnProperty(key))
                    (<any>data["errors"])[key] = this.errors[key] !== undefined ? this.errors[key] : <any>null;
            }
        }
        return data;
    }
}

export interface IValidationProblemDetails {
    type?: string | null;
    title?: string | null;
    status?: number | null;
    detail?: string | null;
    instance?: string | null;
    errors?: { [key: string]: string[]; } | null;

    [key: string]: any;
}

export class VideoViewModel implements IVideoViewModel {
    readonly date?: Date;
    readonly id?: string | null;
    readonly thumbnail?: string | null;
    readonly title?: string | null;
    readonly url?: string | null;

    constructor(data?: IVideoViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).date = _data["date"] ? new Date(_data["date"].toString()) : <any>null;
            (<any>this).id = _data["id"] !== undefined ? _data["id"] : <any>null;
            (<any>this).thumbnail = _data["thumbnail"] !== undefined ? _data["thumbnail"] : <any>null;
            (<any>this).title = _data["title"] !== undefined ? _data["title"] : <any>null;
            (<any>this).url = _data["url"] !== undefined ? _data["url"] : <any>null;
        }
    }

    static fromJS(data: any): VideoViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new VideoViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toISOString() : <any>null;
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["thumbnail"] = this.thumbnail !== undefined ? this.thumbnail : <any>null;
        data["title"] = this.title !== undefined ? this.title : <any>null;
        data["url"] = this.url !== undefined ? this.url : <any>null;
        return data;
    }
}

export interface IVideoViewModel {
    date?: Date;
    id?: string | null;
    thumbnail?: string | null;
    title?: string | null;
    url?: string | null;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any | undefined): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}